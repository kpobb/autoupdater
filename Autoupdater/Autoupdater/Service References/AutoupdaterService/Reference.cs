//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Autoupdater.AutoupdaterService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateResponse", Namespace="http://schemas.datacontract.org/2004/07/AutoupdaterService.Entities")]
    [System.SerializableAttribute()]
    public partial class UpdateResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Autoupdater.AutoupdaterService.File FileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationId {
            get {
                return this.ApplicationIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationIdField, value) != true)) {
                    this.ApplicationIdField = value;
                    this.RaisePropertyChanged("ApplicationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Autoupdater.AutoupdaterService.File File {
            get {
                return this.FileField;
            }
            set {
                if ((object.ReferenceEquals(this.FileField, value) != true)) {
                    this.FileField = value;
                    this.RaisePropertyChanged("File");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="File", Namespace="http://schemas.datacontract.org/2004/07/AutoupdaterService.Entities")]
    [System.SerializableAttribute()]
    public partial class File : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] SourceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AutoupdaterService.IAutoupdaterService")]
    public interface IAutoupdaterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutoupdaterService/UpdateApplication", ReplyAction="http://tempuri.org/IAutoupdaterService/UpdateApplicationResponse")]
        Autoupdater.AutoupdaterService.UpdateResponse UpdateApplication(string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutoupdaterService/UpdateApplication", ReplyAction="http://tempuri.org/IAutoupdaterService/UpdateApplicationResponse")]
        System.Threading.Tasks.Task<Autoupdater.AutoupdaterService.UpdateResponse> UpdateApplicationAsync(string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutoupdaterService/HasUpdate", ReplyAction="http://tempuri.org/IAutoupdaterService/HasUpdateResponse")]
        bool HasUpdate(string applicationId, System.Version version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutoupdaterService/HasUpdate", ReplyAction="http://tempuri.org/IAutoupdaterService/HasUpdateResponse")]
        System.Threading.Tasks.Task<bool> HasUpdateAsync(string applicationId, System.Version version);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAutoupdaterServiceChannel : Autoupdater.AutoupdaterService.IAutoupdaterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutoupdaterServiceClient : System.ServiceModel.ClientBase<Autoupdater.AutoupdaterService.IAutoupdaterService>, Autoupdater.AutoupdaterService.IAutoupdaterService {
        
        public AutoupdaterServiceClient() {
        }
        
        public AutoupdaterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AutoupdaterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AutoupdaterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AutoupdaterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Autoupdater.AutoupdaterService.UpdateResponse UpdateApplication(string applicationId) {
            return base.Channel.UpdateApplication(applicationId);
        }
        
        public System.Threading.Tasks.Task<Autoupdater.AutoupdaterService.UpdateResponse> UpdateApplicationAsync(string applicationId) {
            return base.Channel.UpdateApplicationAsync(applicationId);
        }
        
        public bool HasUpdate(string applicationId, System.Version version) {
            return base.Channel.HasUpdate(applicationId, version);
        }
        
        public System.Threading.Tasks.Task<bool> HasUpdateAsync(string applicationId, System.Version version) {
            return base.Channel.HasUpdateAsync(applicationId, version);
        }
    }
}
